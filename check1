#include <iostream>
#include <fstream>
#include <string>
#include <stdexcept>


struct StringArray {
    std::string* data;  // указатель на массив строк
    size_t size;        // текущее количество элементов
    size_t capacity;    // емкость массива

    // Конструктор
    StringArray(size_t initialCapacity = 10)
        : size(0), capacity(initialCapacity) {
        data = new std::string[capacity];
    }

    // Деструктор
    ~StringArray() {
        delete[] data;
    }

    // Добавление элемента в конец массива
    void add(const std::string& element) {
        if (size >= capacity) {
            resize();
        }
        data[size++] = element;
    }

    // Добавление элемента по индексу
    void insert(size_t index, const std::string& element) {
        if (index > size) {
            throw std::out_of_range("Index out of range");
        }
        if (size >= capacity) {
            resize();
        }
        for (size_t i = size; i > index; --i) {
            data[i] = data[i - 1];
        }
        data[index] = element;
        ++size;
    }

    // Получение элемента по индексу
    std::string get(size_t index) const {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        return data[index];
    }

    // Удаление элемента по индексу
    void remove(size_t index) {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        for (size_t i = index; i < size - 1; ++i) {
            data[i] = data[i + 1];
        }
        --size;
    }

    // Замена элемента по индексу
    void replace(size_t index, const std::string& element) {
        if (index >= size) {
            throw std::out_of_range("Index out of range");
        }
        data[index] = element;
    }

    // Длина массива
    size_t length() const {
        return size;
    }

    // Чтение массива
    void read() const {
        for (size_t i = 0; i < size; ++i) {
            std::cout << i << ": " << data[i] << std::endl;
        }
    }

    // Считывание данных из файла
    void loadFromFile(const std::string& filename) {
        std::ifstream file(filename);
        if (!file.is_open()) {
            throw std::runtime_error("Unable to open file");
        }
        std::string line;
        while (std::getline(file, line)) {
            add(line);
        }
        file.close();
    }

    // Запись данных в файл
    void saveToFile(const std::string& filename) const {
        std::ofstream file(filename);
        if (!file.is_open()) {
            throw std::runtime_error("Unable to open file");
        }
        for (size_t i = 0; i < size; ++i) {
            file << data[i] << std::endl;
        }
        file.close();
    }

private:
    // Увеличение емкости массива
    void resize() {
        capacity *= 2; // Увеличиваем емкость в 2 раза
        std::string* newData = new std::string[capacity];
        for (size_t i = 0; i < size; ++i) {
            newData[i] = data[i];
        }
        delete[] data;
        data = newData;
    }
};

int main() {
    setlocale(LC_ALL, "RU");
    StringArray arr;

    std::string filename;
    std::cout << "Введите имя файла для загрузки (или нажмите Enter для пропуска): ";
    std::getline(std::cin, filename);
    if (!filename.empty()) {
        try {
            arr.loadFromFile(filename);
            std::cout << "Данные загружены из файла." << std::endl;
        }
        catch (const std::exception& e) {
            std::cerr << "Ошибка: " << e.what() << std::endl;
        }
    }

    std::string command;
    while (true) {
        std::cout << "\nВведите команду (add, insert, get, remove, replace, read, save, exit): ";
        std::getline(std::cin, command);

        if (command == "add") {
            std::string element;
            std::cout << "Введите элемент: ";
            std::getline(std::cin, element);
            arr.add(element);
        }
        else if (command == "insert") {
            size_t index;
            std::string element;
            std::cout << "Введите индекс и элемент: ";
            std::cin >> index;
            std::cin.ignore();
            std::getline(std::cin, element);
            try {
                arr.insert(index, element);
            }
            catch (const std::exception& e) {
                std::cerr << "Ошибка: " << e.what() << std::endl;
            }
        }
        else if (command == "get") {
            size_t index;
            std::cout << "Введите индекс: ";
            std::cin >> index;
            std::cin.ignore();
            try {
                std::cout << "Элемент: " << arr.get(index) << std::endl;
            }
            catch (const std::exception& e) {
                std::cerr << "Ошибка: " << e.what() << std::endl;
            }
        }
        else if (command == "remove") {
            size_t index;
            std::cout << "Введите индекс: ";
            std::cin >> index;
            std::cin.ignore();
            try {
                arr.remove(index);
            }
            catch (const std::exception& e) {
                std::cerr << "Ошибка: " << e.what() << std::endl;
            }
        }
        else if (command == "replace") {
            size_t index;
            std::string element;
            std::cout << "Введите индекс и элемент: ";
            std::cin >> index;
            std::cin.ignore();
            std::getline(std::cin, element);
            try {
                arr.replace(index, element);
            }
            catch (const std::exception& e) {
                std::cerr << "Ошибка: " << e.what() << std::endl;
            }
        }
        else if (command == "read") {
            arr.read();
        }
        else if (command == "save") {
            std::string saveFilename;
            std::cout << "Введите имя файла для сохранения: ";
            std::getline(std::cin, saveFilename);
            try {
                arr.saveToFile(saveFilename);
                std::cout << "Данные сохранены в файл." << std::endl;
            }
            catch (const std::exception& e) {
                std::cerr << "Ошибка: " << e.what() << std::endl;
            }
        }
        else if (command == "exit") {
            break;
        }
        else {
            std::cout << "Неизвестная команда." << std::endl;
        }
    }

    return 0;
}
